{"version":3,"sources":["api.ts","components/Context/AppContext.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","INITIAL_CONTEXT","todos","setTodos","selectedTodoId","setSelectedTodoId","searchQuery","setSearchQuery","filterType","setFilterType","listLoader","setListLoader","modalLoader","setModalLoader","AppContext","React","createContext","AppProvider","children","useState","useEffect","finally","value","Provider","useAppContext","appContext","useContext","Error","TodoInfo","todo","id","title","completed","className","cn","type","onClick","TodoList","preparedTodos","filter","normalizedQuery","toLowerCase","trim","normalizedTitle","includes","map","TodoFilter","defaultValue","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","user","setUser","selectedTodo","find","userId","undefined","href","email","name","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f234d47b.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useContext, useState, useEffect } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { ContextType } from '../../types/Context';\nimport { getTodos } from '../../api';\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nconst INITIAL_CONTEXT = {\n  todos: [],\n  setTodos: () => { },\n  selectedTodoId: 0,\n  setSelectedTodoId: () => { },\n  searchQuery: '',\n  setSearchQuery: () => { },\n  filterType: '',\n  setFilterType: () => { },\n  listLoader: false,\n  setListLoader: () => { },\n  modalLoader: false,\n  setModalLoader: () => { },\n};\n\nconst AppContext = React.createContext<ContextType>(INITIAL_CONTEXT);\n\nexport const AppProvider = ({ children }: Props) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterType, setFilterType] = useState('all');\n  const [listLoader, setListLoader] = useState(false);\n  const [modalLoader, setModalLoader] = useState(false);\n\n  useEffect(() => {\n    setListLoader(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setListLoader(false));\n  }, []);\n\n  const value = {\n    todos,\n    setTodos,\n    selectedTodoId,\n    setSelectedTodoId,\n    searchQuery,\n    setSearchQuery,\n    filterType,\n    setFilterType,\n    listLoader,\n    setListLoader,\n    modalLoader,\n    setModalLoader,\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport function useAppContext() {\n  const appContext = useContext(AppContext);\n\n  if (!appContext) {\n    throw new Error('AppContext is null');\n  }\n\n  return appContext;\n}\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppContext } from '../Context/AppContext';\n\ntype Props = {\n  todo: Todo,\n};\n\nconst TodoInfo = ({ todo }: Props) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  const {\n    selectedTodoId,\n    setSelectedTodoId,\n    setModalLoader,\n  } = useAppContext();\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      key={id}\n      className={cn({\n        'has-background-info-light': selectedTodoId === id,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      {completed ? (\n        <td className=\"is-vcentered\">\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </td>\n      ) : (\n        <td className=\"is-vcentered\" />\n      )}\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-danger': !completed,\n          'has-text-success': completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            setSelectedTodoId(id);\n            setModalLoader(true);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': selectedTodoId !== id,\n              'fa-eye-slash': selectedTodoId === id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default TodoInfo;\n","/*eslint-disable*/\nimport TodoInfo from '../TodoInfo/TodoInfo';\nimport { useAppContext } from '../Context/AppContext';\n\nexport const TodoList = () => {\n  const { todos, searchQuery, filterType } = useAppContext();\n  const preparedTodos = [...todos]\n    .filter((todo) => {\n      const normalizedQuery = searchQuery.toLowerCase().trim();\n      const normalizedTitle = todo.title.toLowerCase().trim();\n\n      return searchQuery ? normalizedTitle.includes(normalizedQuery) : true;\n    })\n    .filter((todo) => {\n      switch (filterType) {\n        case 'active': return !todo.completed;\n        case 'completed': return todo.completed;\n        default: return todo;\n      }\n    });\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {preparedTodos.map(todo => (\n          <TodoInfo todo={todo} key={todo.id}/>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppContext } from '../Context/AppContext';\n\nexport const TodoFilter = () => {\n  const {\n    searchQuery,\n    setSearchQuery,\n    filterType,\n    setFilterType,\n  } = useAppContext();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            defaultValue={filterType}\n            onChange={(event) => setFilterType(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"search\"\n          value={searchQuery}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(event) => setSearchQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearchQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppContext } from '../Context/AppContext';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoModal = () => {\n  const [user, setUser] = useState<User | undefined>();\n  const {\n    todos,\n    setModalLoader,\n    selectedTodoId,\n    setSelectedTodoId,\n  } = useAppContext();\n\n  const selectedTodo = todos.find((todo: Todo) => {\n    return todo.id === selectedTodoId;\n  });\n\n  useEffect(() => {\n    setModalLoader(true);\n\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser)\n        .finally(() => setModalLoader(false));\n    }\n  }, [selectedTodoId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && selectedTodoId > 0 ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setUser(undefined);\n                setSelectedTodoId(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppContext } from './components/Context/AppContext';\n\nexport const App: React.FC = () => {\n  const {\n    listLoader,\n    selectedTodoId,\n  } = useAppContext();\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {listLoader && <Loader />}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId > 0 && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { AppProvider } from './components/Context/AppContext';\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}